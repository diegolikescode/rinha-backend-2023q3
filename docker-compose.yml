services:
  db:
    image: postgres:latest
    network_mode: host
    container_name: rinha2023q3_db_1
    environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: rinha
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
    ports:
      - "5432:5432"
    expose:
      - "5432"
    tmpfs:
      - /var/lib/postgresql/data
    volumes:
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./postgres/create_pessoas_table.sql:/docker-entrypoint-initdb.d/init_db.sql
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: '1.5GB'

  api1:
    # image: rinha2023q3:latest
    build: .
    restart: always
    network_mode: host
    container_name: rinha2023q3_1
    environment:
      PORT: "6969"
      API_NAME: "api1"
    depends_on:
      db:
        condition: service_healthy
    expose:
      - "6969"
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: '0.5GB'

  api2:
    # image: rinha2023q3:latest
    build: .
    restart: always
    network_mode: host
    container_name: rinha2023q3_2
    environment:
      PORT: "4200"
      API_NAME: "api2"
    depends_on:
      db:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: '0.5GB'

  nginx:
    image: nginx:latest
    network_mode: host
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/logs:/var/log/nginx
    ulimits:
      nofile:
        soft: 200000
        hard: 200000
    depends_on:
      - api1
      - api2
    expose:
      - "9999"
    deploy:
      resources:
        limits:
          cpus: '0.15'
          memory: '0.5GB'

  # grafana:
  #   image: grafana/grafana
  #   network_mode: host
  #   container_name: grafana
  #   restart: unless-stopped
  #   environment:
  #     GF_SECURITY_ADMIN_PASSWORD: admin
  #   ports:
  #     - '3000:3000'
  #   volumes:
  #     - ./observability/grafana/grafana-readonly:/var/lib/grafana
  #     - ./observability/grafana/provisioning:/etc/grafana/provisioning
  #   depends_on:
  #     - prometheus
  #
  # prometheus:
  #   image: prom/prometheus
  #   network_mode: host
  #   container_name: prometheus
  #   restart: unless-stopped
  #   command: ['--config.file=/etc/prometheus/prometheus.yml']
  #   # ports: ['9090:9090']
  #   volumes:
  #     - ./observability/prometheus:/etc/prometheus
  #   depends_on:
  #     - api1
  #     - api2
